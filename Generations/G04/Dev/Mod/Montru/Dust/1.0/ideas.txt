\\\ BACKLOG \\\
Split language by units (DSL), unit loader to keep in Brain/Boot
text reader / writer
binary reader/writer
DB?
GUI?
console / socket / http?
notification - logging

Event
 agents: clock
 tags: year, month, day, hour, ...
 formatter?
 
ISO
 date format

debug:
 event level constants with numeric value
 limit / classification: compare the number
 agent: set debug level, 
 create static function to compare level, now return true when asked

\\\\\ INCOMING \\\\\

Dust: (? or still narrative?)
 - boot,
 - processJourney(journey, agent): while reading try setjourney, step, finally setjourney(parent)

Dust:
 - classloader
 - call
 - thread management

Narrative
 Agent instance - BAU, agent clone in Journey if state changes
 
The state machine representation of a Turing machine is simple: the answer to "what next"
that is, 
 -> sequence (algorithm step), 
 -> iterate (follow the content of a collection) or 
 -> select (jump table)
  
Information, Knowledge, Journey - all should become Agents 
  > single entry "access" = agent.process
  > single state (map)

Lock the info; if locked then you are the only logic that can change its content

Json export - as a text renderer?
 - separate the visit and log format code (there use only the Info)

=====================================<<<<<< EDGE >>>>>>

[ Semantic net viewer in Swing ]
Geometry
 - info for free drawing
 
Layout
 - GridBag as the source
 
UI core
 - General DSL without Swing dependency
 - Window
 - Tab panel
 - TableMode
 - Geometry-based drawing panel
 
Montru
 - Property panel: displays the selected knowledge node
 
[ Separate modules ]
 -> token sources to a separate shared resource(!) project (like ExtLib before)
 -> project dependency on that project, otherwise independent
 -> ant scripts to copy referred tokens only
 ??? versioning ??? - should be done by separate folders with internal class path
 can be done BEFORE Montru
 
////// BOILING ////////

Visitor as a separate logic with pool.
 - "continued" flag (for comma)
 - self contains state info

Model
 types: source, reference

Narrative
 types: journey, agent, variant
 tags: cmd, state, response

language to the MiND, update the loader


/// SETTLED ///
+ the key is "information", the possible forms of "value": follow CollType
+ entity - tag management to be self containing -> store in map, key is parent
+ token name refactor to <unit>_<type>_<name>; update loader


====== DROPPED ======
- improve access in Entity, path resolution
- "visit" access (no callback (i.e. function) on my side!)
- entity
- pool, queue, stack
- XML: having native support in Java is less important vs the fact that JSON is a perfect match. 
- visitor: NO such thing, Attention Agent took over.


