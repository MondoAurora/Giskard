[[Tasks]]
Split language by units (DSL), unit loader to keep in Brain/Boot
xml reader, serializer?
text reader / writer
binary reader/writer
DB?
GUI?
console / socket / http?
notification - logging

[[Incoming]]

Dust: (? or still narrative?)
 - boot,
 - processJourney(journey, agent): while reading try setjourney, step, finally setjourney(parent)

Dust:
 - classloader
 - call
 - thread management

Narrative
 Agent instance - BAU, agent clone in Journey if state changes
 
Event
 agents: clock
 tags: year, month, day, hour, ...
 formatter?
 
ISO
 date format

The state machine representation of a Turing machine is simple: the answer to "what next"
that is, 
 -> sequence (algorithm step), 
 -> iterate (follow the content of a collection) or 
 -> select (jump table)
 
 flat visitor as a separate logic with stack. OMG.
 and it seems I can't serialize without it.

[[Next]]

visitor with json export
 - separate the visit and log format code (there use only the Info)
 - "continued" flag (for comma)
 - examine self (info) state when setpping, there you have the needed state info
 - lock the info; if locked then you are the only logic that can change its content

debug:
 event level constants with numeric value
 limit / classification: compare the number
 agent: set debug level, 
 create static function to compare level, now return true when asked

[[Typing]]


[[Boiling]]

Drop "visit" access? no callback (i.e. function) on my side?

Model
 types: source, reference

Narrative
 types: journey, agent, variant
 tags: cmd, state, response

improve access in Entity
path resolution
language to the MiND, update the loader


[[Settled]]
- XML: having native support in Java is less important vs the fact that JSON is a perfect match. 
- visitor: NO such thing, Attention Agent took over.

+ drop entity
+ the key is "information", the possible forms of "value": follow CollType
- pool, queue, stack
+ entity - tag management to be self containing -> store in map, key is parent
+ token name refactor to <unit>_<type>_<name>; update loader

